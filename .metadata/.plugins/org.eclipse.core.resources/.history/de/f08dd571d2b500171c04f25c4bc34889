import java.util.Arrays;
import java.util.Comparator;

public class Term implements Comparable<Term> {
    private String query;
    private long weight;

    public Term(String query, long weight) {
        this.query = query;
        this.weight = weight;
    }

    public static Comparator<Term> byReverseWeightOrder() {
        return new Comparator<Term>() {
            @Override
            public int compare(Term o1, Term o2) {
                return Long.compare(o2.weight, o1.weight);
            }
        };
    }

    public static Comparator<Term> byPrefixOrder(int r) {
        int rr = r;
        return new Comparator<Term>() {

            @Override
            public int compare(Term o1, Term o2) {
                if (rr < 0)
                    throw new IllegalArgumentException();
                else if (rr > o1.query.length())
                    return -1;
                else if (rr > o2.query.length())
                    return 1;
                return o1.query.substring(0, rr).compareTo(o2.query.substring(0, rr));
            }
        };
    }

    public int compareTo(Term that) {
        return query.compareTo(that.query);
    }

    public String toString() {
        return weight + "\t" + query;
    }

    public static void main(String[] args) {
        Term[] a = {new Term("hi", 40), new Term("yo", 50), new Term("yes", 20), new Term("no", 200)};
        StdOut.println("Unsorted terms: " + Arrays.toString(a));
        Arrays.sort(a, Term.byReverseWeightOrder());
        StdOut.println("By reverse weight: " + Arrays.toString(a));
        Arrays.sort(a, Term.byPrefixOrder(2));
        StdOut.println("By prefix order (1): " + Arrays.toString(a));
    }
}
