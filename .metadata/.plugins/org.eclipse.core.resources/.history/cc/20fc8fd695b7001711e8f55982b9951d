import java.util.Comparator;
import java.util.Random;
import java.util.stream.IntStream;

import edu.princeton.cs.algs4.MaxPQ;
import edu.princeton.cs.algs4.MinPQ;

public class MyHeapSort {
    
    public static <Item> void minSort(Item[] items, Comparator<Item> comparator) {
        MinPQ<Item> q = new MinPQ<Item>(comparator);
        for (Item i: items)
            q.insert(i);
        int count = 0;
        while (!q.isEmpty()) {
            items[count] = q.delMin();
            count++;
        }
        assert isSorted(items, comparator): items;
    }
    
    public static <Item> MinPQ<Item> minSortConstruction(Item[] items, Comparator<Item> comparator) {
        MinPQ<Item> q = new MinPQ<Item>(comparator);
        for (Item i: items)
            q.insert(i);
        assert isSorted(items, comparator): items;
        return q;
    }
    
    public static <Item> void minSortRemoval(Item[] items, Comparator<Item> comparator, MinPQ<Item> q) {
        int count = 0;
        while (!q.isEmpty()) {
            items[count] = q.delMin();
            count++;
        }
        assert isSorted(items, comparator): items;
    }
    
    /**
     * Rearranges the array in ascending order, using the natural order.
     * @param pq the array to be sorted
     */
    public static void sort(Comparable[] pq) {
        int n = pq.length;
        for (int k = n/2; k >= 1; k--)
            sink(pq, k, n);
        while (n > 1) {
            exch(pq, 1, n--);
            sink(pq, 1, n);
        }
        assert isSorted(pq): pq;
    }
    
    private static void sink(Comparable[] pq, int k, int n) {
        while (2*k <= n) {
            int j = 2*k;
            if (j < n && less(pq, j, j+1)) j++;
            if (!less(pq, k, j)) break;
            exch(pq, k, j);
            k = j;
        }
    }
    
    private static void exch(Object[] pq, int i, int j) {
        Object swap = pq[i-1];
        pq[i-1] = pq[j-1];
        pq[j-1] = swap;
    }
    
    private static boolean less(Comparable[] pq, int i, int j) {
        return pq[i-1].compareTo(pq[j-1]) < 0;
    }
    
    
    private static <Item> boolean isSorted(Item[] a, Comparator<Item> comparator) {
        boolean sorted = true;
        for (int i = 0; i < a.length; i++)
            if (comparator.compare(a[i], a[i + 1]) > 0)
                sorted = false;
        return sorted;
    }
    
    private static boolean isSorted(Comparable[] a) {
        boolean sorted = true;
        for (int i = 0; i < a.length; i++)
            if (a[i].compareTo(a[i + 1]) > 0)
                sorted = false;
        return sorted;
    }
    
    public static void main(String[] args) {
        Random r = new Random();
        Comparator<Integer> compare = new Comparator<Integer>() {
            @Override
            public int compare(Integer o1, Integer o2) {
                return o1.compareTo(o2);
            }
        };
        for (int n = 1000; n < 1000000000; n*=1000) {
            Integer[] randIntsArray = IntStream.generate(r::nextInt).limit(n).boxed().toArray(Integer[]::new);
           
            int j = 0;
            long timeConstruction = 0;
            for (; j < 20; j++) {
                long start = System.nanoTime();
                minSortConstruction(randIntsArray, compare);
                timeConstruction += System.nanoTime()-start;
            }
            
            
            return running;
        }
    }
    
    private static Long testMinSort(int n, int i) {
        
    }
    
    private static void remove(MaxPQ<Integer> q, int num) {
        for (int i = 0; i < num; i++)
            q.delMax();
    }
}
