import java.util.Arrays;

public class Autocomplete {

    private Term[] terms;

    /**
     * Constructs an Autocomplete
     * @param terms
     */
    public Autocomplete(Term[] terms) {
        if (terms == null)
            throw new NullPointerException();
        for (Term t : terms)
            if (t == null)
                throw new NullPointerException();
        this.terms = terms;
        Arrays.sort(this.terms);
    }

    public Term[] allMatches(String prefix) {
        if (prefix == null)
            throw new NullPointerException();
        Term[] matches;
        int first = BinarySearchDeluxe.firstIndexOf(terms, new Term(prefix, 0), Term.byPrefixOrder(prefix.length()));
        int numMatches = numberOfMatches(prefix);
        if (numMatches <= 0 || first == -1)
            return matches = new Term[] {};
        matches = new Term[numMatches];
        matches[0] = terms[first];
        for (int i = 1; i < matches.length; i++)
            matches[i] = terms[++first];
        Arrays.sort(matches, Term.byReverseWeightOrder());
        return matches;
    }

    public int numberOfMatches(String prefix) {
        if (prefix == null)
            throw new NullPointerException();
        Term key = new Term(prefix, 0);
        int numMatches = BinarySearchDeluxe.lastIndexOf(terms, key, Term.byPrefixOrder(prefix.length())) + 1
                - BinarySearchDeluxe.firstIndexOf(terms, key, Term.byPrefixOrder(prefix.length()));
        return numMatches;
    }

    public static void main(String[] args) {
        // read in the terms from a file
        String filename = args[0];
        In in = new In(filename);
        int n = in.readInt();
        Term[] terms = new Term[n];
        for (int i = 0; i < n; i++) {
            long weight = in.readLong(); // read the next weight
            in.readChar(); // scan past the tab
            String query = in.readLine(); // read the next query
            terms[i] = new Term(query, weight); // construct the term
        }

        // read in queries from standard input and print out the top k matching
        // terms
        int k = Integer.parseInt(args[1]);
        Autocomplete autocomplete = new Autocomplete(terms);
        while (StdIn.hasNextLine()) {
            String prefix = StdIn.readLine();
            Term[] results = autocomplete.allMatches(prefix);
            for (int i = 0; i < Math.min(k, results.length); i++)
                StdOut.println(results[i]);
        }
    }

}
