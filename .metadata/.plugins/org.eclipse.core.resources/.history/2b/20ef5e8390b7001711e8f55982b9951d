import java.util.Comparator;

import edu.princeton.cs.algs4.MinPQ;

public class MyHeapSort {
    
    public <Item> void minSort(Item[] items, Comparator<Item> comparator) {
        MinPQ<Item> q = new MinPQ<Item>(comparator);
        for (Item i: items)
            q.insert(i);
        int count = 0;
        while (!q.isEmpty()) {
            items[count] = q.delMin();
            count++;
        }
        assert isSorted(items): items;
    }
    
    private <Item> void minSort(Item[] items, Comparator<Item> comparator) {
        
    }
    
    
    
    /**
     * Rearranges the array in ascending order, using the natural order.
     * @param pq the array to be sorted
     */
    public static void sort(Comparable[] pq) {
        int n = pq.length;
        for (int k = n/2; k >= 1; k--)
            sink(pq, k, n);
        while (n > 1) {
            exch(pq, 1, n--);
            sink(pq, 1, n);
        }
    }
    
    private static void sink(Comparable[] pq, int k, int n) {
        while (2*k <= n) {
            int j = 2*k;
            if (j < n && less(pq, j, j+1)) j++;
            if (!less(pq, k, j)) break;
            exch(pq, k, j);
            k = j;
        }
    }
    
    private static void exch(Object[] pq, int i, int j) {
        Object swap = pq[i-1];
        pq[i-1] = pq[j-1];
        pq[j-1] = swap;
    }
    
    private static boolean less(Comparable[] pq, int i, int j) {
        return pq[i-1].compareTo(pq[j-1]) < 0;
    }
    
    
    private <Item> void isSorted(Item[] a) {
        boolean sorted = true;
        for (int i = 0; i < a.length; i++); { 
            if (a[i] < a[i + 1]) {
                return true;
            }
            else {
                return false;
            }
        }
    }
    
    public static void main(String[] args) {
        
    }
}
