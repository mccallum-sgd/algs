import edu.princeton.cs.algs4.QuickFindUF;

public class Percolation {
   
    private WeightedQuickUF uf;
    
    private final int N;
    private boolean[][] grid;
    int count; //open sites
    
    public Percolation(int N) {
        if (N <= 0) throw new IllegalArgumentException("N must be a positive integer.");
        this.N = N;
        uf = new QuickFindUF(N*N);
        grid = new boolean[N][N];
    }
    
    public void open(int row, int col) {
        validateIndex(row, col);
        grid[row][col] = true;
        System.out.println("opened: [" + row + ", " + col + "]");
        count++;
        connect(row, col);
    }
    
    public boolean isOpen(int row, int col) {
        validateIndex(row, col);
        return grid[row][col] == true;
    }
    
    public boolean isFull(int row, int col) {
        validateIndex(row, col);
        if (!isOpen(row, col)) return false;
        //iterate through top row, checking for connections
        int pIndex = getLinearIndex(row, col);
        for (int i = 0; i < N; i++) {
            if (isOpen(0, i) && uf.connected(pIndex, getLinearIndex(0, i)))
                return true;
        }
        return false;
    }
    
    public int numberOfOpenSites() {
        return count;
    }
    
    public boolean percolates() {
        for (int i = 0; i < N; i++)
            if (isFull(N-1, i)) return true;
        return false;
    }
    
    private void connect(int row, int col) {
        //if surrounding site is open, union
        int pIndex = getLinearIndex(row, col);
        for (int r = row-1; r <= row+1; r++)
            for (int c = col-1; c <= col+1; c++)
                if ((r != row && c != col) && validIndex(r, c) && isOpen(r, c)) {
                    uf.union(pIndex, getLinearIndex(r, c));
                    System.out.println("connected: [" + row + ", " + col + "] , [" + r + ", " + c + "]");
                }
    }
    
    private void validateIndex(int row, int col) {
        if (!validIndex(row, col))
            throw new IndexOutOfBoundsException(
                    "[" + row + ", " + col + "]: Not a valid index (must be 0 to N-1)."
                    );
    }
    
    private boolean validIndex(int row, int col) {
        return row >= 0 && row < N
                && col >= 0 && col < N;
    }
    
    private int getLinearIndex(int row, int col) {
        return row*N+col;
    }
    
    public static void main(String[] args) {
        
    }
    
    public String toString() {
        String str = "";
        for (boolean[] bs: grid) {
            for (boolean b: bs)
                if (b) str += "|";
                else str += "-";
            str += "\n";
        }
        return str;
    }

}
