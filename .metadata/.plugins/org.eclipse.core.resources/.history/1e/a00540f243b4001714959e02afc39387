import java.util.Arrays;
import java.util.Comparator;

public class BinarySearchDeluxe {
	
	public static<Key> int firstIndexOf(Key[] a, Key key, Comparator<Key> comparator) {
	    if (a == null || key == null || comparator == null) 
            throw new NullPointerException();
        int lo=0, hi=a.length-1;
        while (lo+1 <= hi) {
            int mid = lo + (hi-lo)/2;
            if (comparator.compare(key, a[mid]) <= 0)
                if (comparator.compare(key, a[mid-1]) > 0)
                    break;
                else
                    hi = mid-1;
            else
                lo = mid+1;
        } System.out.println(lo + ", " + hi + ", " + a[lo]);
        if (comparator.compare(key, a[lo]) == 0)
            return lo;
        else if (comparator.compare(key, a[hi]) == 0)
            return hi;
        else
            return -1;
	}
	
	@Deprecated
	public static <Key> int firstIndOf(Key[] a, Key key, Comparator<Key> comparator) {
	    if (a == null || key == null || comparator == null) 
            throw new NullPointerException();
        int lo=0, hi=a.length-1;
        while (lo <= hi) {
            int mid = lo + (hi-lo)/2;
            int x = comparator.compare(key, a[mid]);
            if ((mid == 0 || comparator.compare(key, a[mid-1]) > 0) && x == 0)
                return mid;
            else if (x > 0)
                lo = mid+1;
            else
                hi = mid-1;
        }
        assert !Arrays.asList(a).contains(key): Arrays.asList(a).indexOf(key);
        return -1;
    }
	
	public static <Key> int lastIndexOf(Key[] a, Key key, Comparator<Key> comparator) {
	    if (a == null || key == null || comparator == null) 
            throw new NullPointerException();
        int lo=0, hi=a.length-1;
        while (lo+1 <= hi) {
            int mid = lo + (hi-lo)/2;
            if (comparator.compare(key, a[mid]) >= 0)
                if (comparator.compare(key, a[mid+1]) < 0)
                    break;
                else
                    lo = mid+1;
            else
                hi = mid-1;
        }
        if (comparator.compare(key, a[lo]) == 0)
            return lo;
        else if (comparator.compare(key, a[hi]) == 0)
            return hi;
        else
            return -1;
	}
	
	@Deprecated
	public static <Key> int lastIndOf(Key[] a, Key key, Comparator<Key> comparator) {
	    if (a == null || key == null || comparator == null) 
            throw new NullPointerException();
        int lo=0, hi=a.length-1;
        while (lo <= hi) {
            int mid = lo + (hi-lo)/2;
            System.out.print(lo + ", " + mid + ", " + hi);
            int x = comparator.compare(key, a[mid]);
            if ((mid == a.length-1 || comparator.compare(key, a[mid+1]) < 0) && x == 0)
                return mid;
            else if (x < 0)
                hi = mid-1;
            else
                lo = mid+1;
        }
        assert !Arrays.asList(a).contains(key): Arrays.asList(a).indexOf(key);
        return -1;
	}
	
	public static void main(String[] args) {
		Integer[] a = {1,2,3,3,3,3,3,4,4,4,5,6,6,6};
		Integer key = 3;
		Comparator<Integer> comparator = new Comparator<Integer>() {
			@Override
			public int compare(Integer o1, Integer o2)
			{ return o1.compareTo(o2); }
		};
		System.out.println("Array: " + Arrays.toString(a) + "\n" +
							"Search for: " + key + "\n" +
							"First index: " + firstIndOf(a, key, comparator) + "\n" +
							"Last index: " + lastIndOf(a, key, comparator)
				);
	}

}
